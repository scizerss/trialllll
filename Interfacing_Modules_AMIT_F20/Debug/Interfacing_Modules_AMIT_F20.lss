
Interfacing_Modules_AMIT_F20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000572  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000572  000005e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001227  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000096d  00000000  00000000  00001957  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007fd  00000000  00000000  000022c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  00002ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050c  00000000  00000000  00002c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000560  00000000  00000000  0000312c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000368c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 42 02 	call	0x484	; 0x484 <main>
  8a:	0c 94 b7 02 	jmp	0x56e	; 0x56e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Initialize>:
{
	//Voltage reference
	#if ADC_Vref == ADC_AREF
	CLR_BIT(ADMUX, REFS1);CLR_BIT(ADMUX, REFS0);
	#elif ADC_Vref == ADC_AVCC
	CLR_BIT(ADMUX, REFS1);SET_BIT(ADMUX, REFS0);
  92:	3f 98       	cbi	0x07, 7	; 7
  94:	3e 9a       	sbi	0x07, 6	; 7
	#elif ADC_Vref == ADC_Internal
	SET_BIT(ADMUX, REFS1);SET_BIT(ADMUX, REFS0);
	#endif	
	//ADC read adjust, Choose right adjust
	CLR_BIT(ADMUX, ADLAR);
  96:	3d 98       	cbi	0x07, 5	; 7
	//Select channel-1
	CLR_BIT(ADMUX, MUX4);CLR_BIT(ADMUX, MUX3);CLR_BIT(ADMUX, MUX2);CLR_BIT(ADMUX, MUX1);SET_BIT(ADMUX, MUX0);
  98:	3c 98       	cbi	0x07, 4	; 7
  9a:	3b 98       	cbi	0x07, 3	; 7
  9c:	3a 98       	cbi	0x07, 2	; 7
  9e:	39 98       	cbi	0x07, 1	; 7
  a0:	38 9a       	sbi	0x07, 0	; 7
	//ADC Auto trigger enable
	SET_BIT(ADCSRA, ADATE);
  a2:	35 9a       	sbi	0x06, 5	; 6
	//Prescaler
	SET_BIT(ADCSRA, ADPS2);SET_BIT(ADCSRA, ADPS1);SET_BIT(ADCSRA, ADPS0);
  a4:	32 9a       	sbi	0x06, 2	; 6
  a6:	31 9a       	sbi	0x06, 1	; 6
  a8:	30 9a       	sbi	0x06, 0	; 6
	//ADC enable
	SET_BIT(ADCSRA, ADEN);
  aa:	37 9a       	sbi	0x06, 7	; 6
  ac:	08 95       	ret

000000ae <ADC_Read>:
}
uint16_t ADC_Read(void)
{
	uint16_t var = 0;//Create variable to read value 
	SET_BIT(ADCSRA, ADSC);//Start of conversion
  ae:	36 9a       	sbi	0x06, 6	; 6
	while(GET_BIT(ADCSRA, ADIF) != 1);//Wait until conversion finish
  b0:	34 9b       	sbis	0x06, 4	; 6
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <ADC_Read+0x2>
	var = ADC_DTA;//Read from output register
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	95 b1       	in	r25, 0x05	; 5
	return var;//return value
  b8:	08 95       	ret

000000ba <DIO_SetPin_Direction>:

#include "DIO.h"

void DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_Direction direction)
{
	switch (direction)
  ba:	44 23       	and	r20, r20
  bc:	19 f0       	breq	.+6      	; 0xc4 <DIO_SetPin_Direction+0xa>
  be:	41 30       	cpi	r20, 0x01	; 1
  c0:	c9 f1       	breq	.+114    	; 0x134 <DIO_SetPin_Direction+0x7a>
  c2:	08 95       	ret
	{
		case DIO_INPUT:
		switch (port)
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	91 f0       	breq	.+36     	; 0xec <DIO_SetPin_Direction+0x32>
  c8:	28 f0       	brcs	.+10     	; 0xd4 <DIO_SetPin_Direction+0x1a>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	d9 f0       	breq	.+54     	; 0x104 <DIO_SetPin_Direction+0x4a>
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	29 f1       	breq	.+74     	; 0x11c <DIO_SetPin_Direction+0x62>
  d2:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  d4:	2a b3       	in	r18, 0x1a	; 26
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_SetPin_Direction+0x26>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_SetPin_Direction+0x22>
  e4:	80 95       	com	r24
  e6:	82 23       	and	r24, r18
  e8:	8a bb       	out	0x1a, r24	; 26
			break;
  ea:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
  ec:	27 b3       	in	r18, 0x17	; 23
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_SetPin_Direction+0x3e>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_SetPin_Direction+0x3a>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	87 bb       	out	0x17, r24	; 23
			break;
 102:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
 104:	24 b3       	in	r18, 0x14	; 20
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_SetPin_Direction+0x56>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_SetPin_Direction+0x52>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	84 bb       	out	0x14, r24	; 20
			break;
 11a:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
 11c:	21 b3       	in	r18, 0x11	; 17
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPin_Direction+0x6e>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPin_Direction+0x6a>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	81 bb       	out	0x11, r24	; 17
			break;
 132:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (port)
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	89 f0       	breq	.+34     	; 0x15a <DIO_SetPin_Direction+0xa0>
 138:	28 f0       	brcs	.+10     	; 0x144 <DIO_SetPin_Direction+0x8a>
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	c9 f0       	breq	.+50     	; 0x170 <DIO_SetPin_Direction+0xb6>
 13e:	83 30       	cpi	r24, 0x03	; 3
 140:	11 f1       	breq	.+68     	; 0x186 <DIO_SetPin_Direction+0xcc>
 142:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 144:	2a b3       	in	r18, 0x1a	; 26
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_SetPin_Direction+0x96>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_SetPin_Direction+0x92>
 154:	82 2b       	or	r24, r18
 156:	8a bb       	out	0x1a, r24	; 26
			break;
 158:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 15a:	27 b3       	in	r18, 0x17	; 23
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_SetPin_Direction+0xac>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_SetPin_Direction+0xa8>
 16a:	82 2b       	or	r24, r18
 16c:	87 bb       	out	0x17, r24	; 23
			break;
 16e:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 170:	24 b3       	in	r18, 0x14	; 20
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_SetPin_Direction+0xc2>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_SetPin_Direction+0xbe>
 180:	82 2b       	or	r24, r18
 182:	84 bb       	out	0x14, r24	; 20
			break;
 184:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 186:	21 b3       	in	r18, 0x11	; 17
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_SetPin_Direction+0xd8>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_SetPin_Direction+0xd4>
 196:	82 2b       	or	r24, r18
 198:	81 bb       	out	0x11, r24	; 17
 19a:	08 95       	ret

0000019c <DIO_SetPin_State>:
		break;
	}
}
void DIO_SetPin_State(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	switch (state)
 19c:	44 23       	and	r20, r20
 19e:	19 f0       	breq	.+6      	; 0x1a6 <DIO_SetPin_State+0xa>
 1a0:	41 30       	cpi	r20, 0x01	; 1
 1a2:	c9 f1       	breq	.+114    	; 0x216 <DIO_SetPin_State+0x7a>
 1a4:	08 95       	ret
	{
		case DIO_LOW:
		switch (port)
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	91 f0       	breq	.+36     	; 0x1ce <DIO_SetPin_State+0x32>
 1aa:	28 f0       	brcs	.+10     	; 0x1b6 <DIO_SetPin_State+0x1a>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	d9 f0       	breq	.+54     	; 0x1e6 <DIO_SetPin_State+0x4a>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	29 f1       	breq	.+74     	; 0x1fe <DIO_SetPin_State+0x62>
 1b4:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 1b6:	2b b3       	in	r18, 0x1b	; 27
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_SetPin_State+0x26>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_SetPin_State+0x22>
 1c6:	80 95       	com	r24
 1c8:	82 23       	and	r24, r18
 1ca:	8b bb       	out	0x1b, r24	; 27
			break;
 1cc:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 1ce:	28 b3       	in	r18, 0x18	; 24
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_SetPin_State+0x3e>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_SetPin_State+0x3a>
 1de:	80 95       	com	r24
 1e0:	82 23       	and	r24, r18
 1e2:	88 bb       	out	0x18, r24	; 24
			break;
 1e4:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 1e6:	25 b3       	in	r18, 0x15	; 21
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_SetPin_State+0x56>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_SetPin_State+0x52>
 1f6:	80 95       	com	r24
 1f8:	82 23       	and	r24, r18
 1fa:	85 bb       	out	0x15, r24	; 21
			break;
 1fc:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 1fe:	22 b3       	in	r18, 0x12	; 18
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_SetPin_State+0x6e>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_SetPin_State+0x6a>
 20e:	80 95       	com	r24
 210:	82 23       	and	r24, r18
 212:	82 bb       	out	0x12, r24	; 18
			break;
 214:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (port)
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	89 f0       	breq	.+34     	; 0x23c <DIO_SetPin_State+0xa0>
 21a:	28 f0       	brcs	.+10     	; 0x226 <DIO_SetPin_State+0x8a>
 21c:	82 30       	cpi	r24, 0x02	; 2
 21e:	c9 f0       	breq	.+50     	; 0x252 <DIO_SetPin_State+0xb6>
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	11 f1       	breq	.+68     	; 0x268 <DIO_SetPin_State+0xcc>
 224:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 226:	2b b3       	in	r18, 0x1b	; 27
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_SetPin_State+0x96>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_SetPin_State+0x92>
 236:	82 2b       	or	r24, r18
 238:	8b bb       	out	0x1b, r24	; 27
			break;
 23a:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 23c:	28 b3       	in	r18, 0x18	; 24
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_SetPin_State+0xac>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_SetPin_State+0xa8>
 24c:	82 2b       	or	r24, r18
 24e:	88 bb       	out	0x18, r24	; 24
			break;
 250:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 252:	25 b3       	in	r18, 0x15	; 21
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_SetPin_State+0xc2>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_SetPin_State+0xbe>
 262:	82 2b       	or	r24, r18
 264:	85 bb       	out	0x15, r24	; 21
			break;
 266:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 268:	22 b3       	in	r18, 0x12	; 18
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_SetPin_State+0xd8>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_SetPin_State+0xd4>
 278:	82 2b       	or	r24, r18
 27a:	82 bb       	out	0x12, r24	; 18
 27c:	08 95       	ret

0000027e <LCD_WRITE_CMD>:
	LCD_WRITE_CMD(0x0C);//Display on, cursor off
	LCD_WRITE_CMD(0x01);//Clear Screen
	LCD_WRITE_CMD(0x06);//Increment right
}
void LCD_WRITE_CMD(uint8_t cmd)/*Write command inside control register*/
{
 27e:	cf 93       	push	r28
 280:	c8 2f       	mov	r28, r24
	/*RS is logic(0) to write inside control register*/
	DIO_SetPin_State(LCD_CMD_PORT, LCD_RS, LCD_LOW);
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_State>
	/*RW is logic(0) to write on LCD*/
	DIO_SetPin_State(LCD_CMD_PORT, LCD_RW, LCD_LOW);
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	62 e0       	ldi	r22, 0x02	; 2
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_State>
	/*To be sure of enable state before start operation*/
	DIO_SetPin_State(LCD_CMD_PORT, LCD_EN, LCD_LOW);
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	63 e0       	ldi	r22, 0x03	; 3
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_State>
	/*Send high nibble of command*/
	PORTA = (cmd & 0xF0) | (PORTA & 0x0F);
 2a0:	8b b3       	in	r24, 0x1b	; 27
 2a2:	9c 2f       	mov	r25, r28
 2a4:	90 7f       	andi	r25, 0xF0	; 240
 2a6:	8f 70       	andi	r24, 0x0F	; 15
 2a8:	89 2b       	or	r24, r25
 2aa:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_State(LCD_CMD_PORT, LCD_EN, LCD_HIGH);
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	63 e0       	ldi	r22, 0x03	; 3
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_State>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b6:	8f e9       	ldi	r24, 0x9F	; 159
 2b8:	9f e0       	ldi	r25, 0x0F	; 15
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCD_WRITE_CMD+0x3c>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <LCD_WRITE_CMD+0x42>
 2c0:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_State(LCD_CMD_PORT, LCD_EN, LCD_LOW);
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	63 e0       	ldi	r22, 0x03	; 3
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_State>
	/*send low nibble of command*/
	PORTA = (cmd << 4) | (PORTA & 0x0F);
 2cc:	2b b3       	in	r18, 0x1b	; 27
 2ce:	30 e1       	ldi	r19, 0x10	; 16
 2d0:	c3 9f       	mul	r28, r19
 2d2:	c0 01       	movw	r24, r0
 2d4:	11 24       	eor	r1, r1
 2d6:	92 2f       	mov	r25, r18
 2d8:	9f 70       	andi	r25, 0x0F	; 15
 2da:	89 2b       	or	r24, r25
 2dc:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_State(LCD_CMD_PORT, LCD_EN, LCD_HIGH);
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	63 e0       	ldi	r22, 0x03	; 3
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_State>
 2e8:	8f e9       	ldi	r24, 0x9F	; 159
 2ea:	9f e0       	ldi	r25, 0x0F	; 15
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCD_WRITE_CMD+0x6e>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <LCD_WRITE_CMD+0x74>
 2f2:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_State(LCD_CMD_PORT, LCD_EN, LCD_LOW);
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	63 e0       	ldi	r22, 0x03	; 3
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_State>
 2fe:	8f e3       	ldi	r24, 0x3F	; 63
 300:	9f e1       	ldi	r25, 0x1F	; 31
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <LCD_WRITE_CMD+0x84>
 306:	00 c0       	rjmp	.+0      	; 0x308 <LCD_WRITE_CMD+0x8a>
 308:	00 00       	nop
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <LCD_Init>:

#include "LCD.h"
void LCD_Init(void)/*Initialize LCD*/
{
	/*Define direction for command pins*/
	DIO_SetPin_Direction(LCD_CMD_PORT, LCD_RS, LCD_OUTPUT);
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CMD_PORT, LCD_RW, LCD_OUTPUT);
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	62 e0       	ldi	r22, 0x02	; 2
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CMD_PORT, LCD_EN, LCD_OUTPUT);
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	63 e0       	ldi	r22, 0x03	; 3
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPin_Direction>
	/*Define direction for data pins*/
	DIO_SetPin_Direction(LCD_DTA_PORT, LCD_D4, LCD_OUTPUT);
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	64 e0       	ldi	r22, 0x04	; 4
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DTA_PORT, LCD_D5, LCD_OUTPUT);
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	65 e0       	ldi	r22, 0x05	; 5
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DTA_PORT, LCD_D6, LCD_OUTPUT);
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	66 e0       	ldi	r22, 0x06	; 6
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DTA_PORT, LCD_D7, LCD_OUTPUT);
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	67 e0       	ldi	r22, 0x07	; 7
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPin_Direction>
 354:	2f ef       	ldi	r18, 0xFF	; 255
 356:	81 ee       	ldi	r24, 0xE1	; 225
 358:	94 e0       	ldi	r25, 0x04	; 4
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	80 40       	sbci	r24, 0x00	; 0
 35e:	90 40       	sbci	r25, 0x00	; 0
 360:	e1 f7       	brne	.-8      	; 0x35a <LCD_Init+0x4c>
 362:	00 c0       	rjmp	.+0      	; 0x364 <LCD_Init+0x56>
 364:	00 00       	nop
	/*LCD controller is slower than MC speed*/
	_delay_ms(100);
	//Commands according to data sheet
	LCD_WRITE_CMD(0x02);//Go Home
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_WRITE_CMD>
	LCD_WRITE_CMD(0x33);//Sequence for 4-BIT
 36c:	83 e3       	ldi	r24, 0x33	; 51
 36e:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_WRITE_CMD>
	LCD_WRITE_CMD(0x32);//Sequence for 4-BIT
 372:	82 e3       	ldi	r24, 0x32	; 50
 374:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_WRITE_CMD>
	LCD_WRITE_CMD(0x28);//Sequence for 4-BIT
 378:	88 e2       	ldi	r24, 0x28	; 40
 37a:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_WRITE_CMD>
	LCD_WRITE_CMD(0x0C);//Display on, cursor off
 37e:	8c e0       	ldi	r24, 0x0C	; 12
 380:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_WRITE_CMD>
	LCD_WRITE_CMD(0x01);//Clear Screen
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_WRITE_CMD>
	LCD_WRITE_CMD(0x06);//Increment right
 38a:	86 e0       	ldi	r24, 0x06	; 6
 38c:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_WRITE_CMD>
 390:	08 95       	ret

00000392 <LCD_WRITE_DTA>:
	DIO_SetPin_State(LCD_CMD_PORT, LCD_EN, LCD_LOW);
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
void LCD_WRITE_DTA(uint8_t dta)/*write data inside data register*/
{
 392:	cf 93       	push	r28
 394:	c8 2f       	mov	r28, r24
	/*RS is logic(1) to write inside data register*/
	DIO_SetPin_State(LCD_CMD_PORT, LCD_RS, LCD_HIGH);
 396:	41 e0       	ldi	r20, 0x01	; 1
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_State>
	/*RW is logic(0) to write on LCD*/
	DIO_SetPin_State(LCD_CMD_PORT, LCD_RW, LCD_LOW);
 3a0:	40 e0       	ldi	r20, 0x00	; 0
 3a2:	62 e0       	ldi	r22, 0x02	; 2
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_State>
	/*To be sure of enable state before start operation*/
	DIO_SetPin_State(LCD_CMD_PORT, LCD_EN, LCD_LOW);
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	63 e0       	ldi	r22, 0x03	; 3
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_State>
	/*Send high nibble of command*/
	PORTA = (dta & 0xF0) | (PORTA & 0x0F);
 3b4:	8b b3       	in	r24, 0x1b	; 27
 3b6:	9c 2f       	mov	r25, r28
 3b8:	90 7f       	andi	r25, 0xF0	; 240
 3ba:	8f 70       	andi	r24, 0x0F	; 15
 3bc:	89 2b       	or	r24, r25
 3be:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_State(LCD_CMD_PORT, LCD_EN, LCD_HIGH);
 3c0:	41 e0       	ldi	r20, 0x01	; 1
 3c2:	63 e0       	ldi	r22, 0x03	; 3
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_State>
 3ca:	8f e9       	ldi	r24, 0x9F	; 159
 3cc:	9f e0       	ldi	r25, 0x0F	; 15
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <LCD_WRITE_DTA+0x3c>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <LCD_WRITE_DTA+0x42>
 3d4:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_State(LCD_CMD_PORT, LCD_EN, LCD_LOW);
 3d6:	40 e0       	ldi	r20, 0x00	; 0
 3d8:	63 e0       	ldi	r22, 0x03	; 3
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_State>
	/*send low nibble of command*/
	PORTA = (dta << 4) | (PORTA & 0x0F);
 3e0:	2b b3       	in	r18, 0x1b	; 27
 3e2:	30 e1       	ldi	r19, 0x10	; 16
 3e4:	c3 9f       	mul	r28, r19
 3e6:	c0 01       	movw	r24, r0
 3e8:	11 24       	eor	r1, r1
 3ea:	92 2f       	mov	r25, r18
 3ec:	9f 70       	andi	r25, 0x0F	; 15
 3ee:	89 2b       	or	r24, r25
 3f0:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_State(LCD_CMD_PORT, LCD_EN, LCD_HIGH);
 3f2:	41 e0       	ldi	r20, 0x01	; 1
 3f4:	63 e0       	ldi	r22, 0x03	; 3
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_State>
 3fc:	8f e9       	ldi	r24, 0x9F	; 159
 3fe:	9f e0       	ldi	r25, 0x0F	; 15
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_State(LCD_CMD_PORT, LCD_EN, LCD_LOW);
 408:	40 e0       	ldi	r20, 0x00	; 0
 40a:	63 e0       	ldi	r22, 0x03	; 3
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_State>
 412:	8f e3       	ldi	r24, 0x3F	; 63
 414:	9f e1       	ldi	r25, 0x1F	; 31
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <LCD_WRITE_STR>:
void LCD_WRITE_STR(uint8_t* str)/*write string on screen*/
{
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	ec 01       	movw	r28, r24
	while(*str != '\0')
 428:	88 81       	ld	r24, Y
 42a:	88 23       	and	r24, r24
 42c:	31 f0       	breq	.+12     	; 0x43a <LCD_WRITE_STR+0x18>
 42e:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_WRITE_DTA(*str);
 430:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_WRITE_DTA>
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
void LCD_WRITE_STR(uint8_t* str)/*write string on screen*/
{
	while(*str != '\0')
 434:	89 91       	ld	r24, Y+
 436:	81 11       	cpse	r24, r1
 438:	fb cf       	rjmp	.-10     	; 0x430 <LCD_WRITE_STR+0xe>
	{
		LCD_WRITE_DTA(*str);
		str++;
	}
}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <LCD_WRITE_NBR>:
void LCD_WRITE_NBR(uint32_t numbr)
{
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62
 448:	2a 97       	sbiw	r28, 0x0a	; 10
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	f8 94       	cli
 44e:	de bf       	out	0x3e, r29	; 62
 450:	0f be       	out	0x3f, r0	; 63
 452:	cd bf       	out	0x3d, r28	; 61
	uint8_t num[10];
	ltoa(numbr, (uint8_t*)num, 10);//Long to ASCII
 454:	2a e0       	ldi	r18, 0x0A	; 10
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	ae 01       	movw	r20, r28
 45a:	4f 5f       	subi	r20, 0xFF	; 255
 45c:	5f 4f       	sbci	r21, 0xFF	; 255
 45e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <ltoa>
	LCD_WRITE_STR(num);
 462:	ce 01       	movw	r24, r28
 464:	01 96       	adiw	r24, 0x01	; 1
 466:	0e 94 11 02 	call	0x422	; 0x422 <LCD_WRITE_STR>
}
 46a:	2a 96       	adiw	r28, 0x0a	; 10
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <LCD_CLEAR>:
void LCD_CLEAR(void)/*Clear data display on screen*/
{
	LCD_WRITE_CMD(CLEAR_SCREEN);
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_WRITE_CMD>
 482:	08 95       	ret

00000484 <main>:
#include "OUTPUT_Module.h"


int main(void)
{
	LCD_Init();
 484:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_Init>
	ADC_Initialize();
 488:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Initialize>
	LCD_CLEAR();
 48c:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_CLEAR>
	uint16_t voltage;
	while (1)
	{
		voltage=ADC_Read();
 490:	0e 94 57 00 	call	0xae	; 0xae <ADC_Read>
 494:	ec 01       	movw	r28, r24
 496:	2f ef       	ldi	r18, 0xFF	; 255
 498:	80 e7       	ldi	r24, 0x70	; 112
 49a:	92 e0       	ldi	r25, 0x02	; 2
 49c:	21 50       	subi	r18, 0x01	; 1
 49e:	80 40       	sbci	r24, 0x00	; 0
 4a0:	90 40       	sbci	r25, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <main+0x18>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <main+0x22>
 4a6:	00 00       	nop
		_delay_ms(50);
		if (voltage != 0)
 4a8:	20 97       	sbiw	r28, 0x00	; 0
 4aa:	91 f3       	breq	.-28     	; 0x490 <main+0xc>
		{
			LCD_CLEAR();
 4ac:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_CLEAR>
			LCD_WRITE_STR("voltage = ");
 4b0:	80 e6       	ldi	r24, 0x60	; 96
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 11 02 	call	0x422	; 0x422 <LCD_WRITE_STR>
			LCD_WRITE_NBR(voltage);
 4b8:	be 01       	movw	r22, r28
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 20 02 	call	0x440	; 0x440 <LCD_WRITE_NBR>
 4c2:	2f ef       	ldi	r18, 0xFF	; 255
 4c4:	82 e5       	ldi	r24, 0x52	; 82
 4c6:	97 e0       	ldi	r25, 0x07	; 7
 4c8:	21 50       	subi	r18, 0x01	; 1
 4ca:	80 40       	sbci	r24, 0x00	; 0
 4cc:	90 40       	sbci	r25, 0x00	; 0
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <main+0x44>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <main+0x4e>
 4d2:	00 00       	nop
 4d4:	dd cf       	rjmp	.-70     	; 0x490 <main+0xc>

000004d6 <ltoa>:
 4d6:	25 32       	cpi	r18, 0x25	; 37
 4d8:	31 05       	cpc	r19, r1
 4da:	20 f4       	brcc	.+8      	; 0x4e4 <ltoa+0xe>
 4dc:	22 30       	cpi	r18, 0x02	; 2
 4de:	10 f0       	brcs	.+4      	; 0x4e4 <ltoa+0xe>
 4e0:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__ltoa_ncheck>
 4e4:	fa 01       	movw	r30, r20
 4e6:	10 82       	st	Z, r1
 4e8:	ca 01       	movw	r24, r20
 4ea:	08 95       	ret

000004ec <__ltoa_ncheck>:
 4ec:	bb 27       	eor	r27, r27
 4ee:	2a 30       	cpi	r18, 0x0A	; 10
 4f0:	51 f4       	brne	.+20     	; 0x506 <__ltoa_ncheck+0x1a>
 4f2:	99 23       	and	r25, r25
 4f4:	42 f4       	brpl	.+16     	; 0x506 <__ltoa_ncheck+0x1a>
 4f6:	bd e2       	ldi	r27, 0x2D	; 45
 4f8:	90 95       	com	r25
 4fa:	80 95       	com	r24
 4fc:	70 95       	com	r23
 4fe:	61 95       	neg	r22
 500:	7f 4f       	sbci	r23, 0xFF	; 255
 502:	8f 4f       	sbci	r24, 0xFF	; 255
 504:	9f 4f       	sbci	r25, 0xFF	; 255
 506:	0c 94 86 02 	jmp	0x50c	; 0x50c <__ultoa_common>

0000050a <__ultoa_ncheck>:
 50a:	bb 27       	eor	r27, r27

0000050c <__ultoa_common>:
 50c:	fa 01       	movw	r30, r20
 50e:	a6 2f       	mov	r26, r22
 510:	62 17       	cp	r22, r18
 512:	71 05       	cpc	r23, r1
 514:	81 05       	cpc	r24, r1
 516:	91 05       	cpc	r25, r1
 518:	33 0b       	sbc	r19, r19
 51a:	30 fb       	bst	r19, 0
 51c:	66 f0       	brts	.+24     	; 0x536 <__ultoa_common+0x2a>
 51e:	aa 27       	eor	r26, r26
 520:	66 0f       	add	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	88 1f       	adc	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	aa 1f       	adc	r26, r26
 52a:	a2 17       	cp	r26, r18
 52c:	10 f0       	brcs	.+4      	; 0x532 <__ultoa_common+0x26>
 52e:	a2 1b       	sub	r26, r18
 530:	63 95       	inc	r22
 532:	38 50       	subi	r19, 0x08	; 8
 534:	a9 f7       	brne	.-22     	; 0x520 <__ultoa_common+0x14>
 536:	a0 5d       	subi	r26, 0xD0	; 208
 538:	aa 33       	cpi	r26, 0x3A	; 58
 53a:	08 f0       	brcs	.+2      	; 0x53e <__ultoa_common+0x32>
 53c:	a9 5d       	subi	r26, 0xD9	; 217
 53e:	a1 93       	st	Z+, r26
 540:	36 f7       	brtc	.-52     	; 0x50e <__ultoa_common+0x2>
 542:	b1 11       	cpse	r27, r1
 544:	b1 93       	st	Z+, r27
 546:	10 82       	st	Z, r1
 548:	ca 01       	movw	r24, r20
 54a:	0c 94 a7 02 	jmp	0x54e	; 0x54e <strrev>

0000054e <strrev>:
 54e:	dc 01       	movw	r26, r24
 550:	fc 01       	movw	r30, r24
 552:	67 2f       	mov	r22, r23
 554:	71 91       	ld	r23, Z+
 556:	77 23       	and	r23, r23
 558:	e1 f7       	brne	.-8      	; 0x552 <strrev+0x4>
 55a:	32 97       	sbiw	r30, 0x02	; 2
 55c:	04 c0       	rjmp	.+8      	; 0x566 <strrev+0x18>
 55e:	7c 91       	ld	r23, X
 560:	6d 93       	st	X+, r22
 562:	70 83       	st	Z, r23
 564:	62 91       	ld	r22, -Z
 566:	ae 17       	cp	r26, r30
 568:	bf 07       	cpc	r27, r31
 56a:	c8 f3       	brcs	.-14     	; 0x55e <strrev+0x10>
 56c:	08 95       	ret

0000056e <_exit>:
 56e:	f8 94       	cli

00000570 <__stop_program>:
 570:	ff cf       	rjmp	.-2      	; 0x570 <__stop_program>
